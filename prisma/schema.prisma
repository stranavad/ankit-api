// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// AUTH ONLY

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// ACCOUNT

model Account {
  id                String          @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?         @db.Text
  access_token      String?         @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?         @db.Text
  session_state     String?
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  members           Member[]

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

// COLLABORATION MODULE

model Member {
    id          Int     @id @default(autoincrement())
    name        String
    role        String
    accepted    Boolean     @default(false)
    accountId   String
    account     Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
    spaceId     Int?
    space       Space?       @relation(fields: [spaceId], references: [id])
    spaceOwner      Space? @relation("owner")
    created        DateTime        @default(now())
    updated        DateTime        @default(now())

    @@unique([accountId, spaceId])
}

model Space {
  id             Int             @id @default(autoincrement())
  name           String          @default("New Space")
  description    String?
  personal       Boolean         @default(false)
  created        DateTime        @default(now())
  updated        DateTime        @default(now())
  members        Member[]
  ownerId        Int             @unique
  owner          Member          @relation("owner", fields: [ownerId], references: [id])
}

// END OF COLLABORATION MODULEs

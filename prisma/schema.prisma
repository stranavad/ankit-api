generator client {
  provider = "prisma-client-js"
}

generator js {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  sessions      Session[]
  accounts      Account[]
  members       Member[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Member {
  id       Int      @id @default(autoincrement())
  name     String
  role     String
  accepted Boolean  @default(false)
  spaceId  Int
  created  DateTime @default(now())
  updated  DateTime @default(now())
  userId   Int
  space    Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, spaceId])
  @@index([spaceId], map: "Member_spaceId_fkey")
  @@index([userId])
}

model Space {
  id             Int             @id @default(autoincrement())
  name           String          @default("New Space")
  description    String?
  personal       Boolean         @default(false)
  created        DateTime        @default(now())
  updated        DateTime        @default(now())
  members        Member[]
  questionnaires Questionnaire[]
}

model Questionnaire {
  id                Int        @id @default(autoincrement())
  name              String     @default("New Questionnaire")
  description       String?    @db.Text
  category          Int        @default(1)
  url               String?
  status            String     @default("paused")
  timeLimit         Int?
  allowReturn       Boolean    @default(true)
  structure         String     @default("list")
  passwordProtected Boolean    @default(false)
  password          String?
  spaceId           Int
  created           DateTime   @default(now())
  updated           DateTime   @default(now())
  space             Space      @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  questions         Question[]
}

model Question {
  id              Int           @id @default(autoincrement())
  title           String        @default("New question")
  description     String?       @db.Text
  visible         Boolean       @default(true)
  required        Boolean       @default(false)
  timeLimit       Int?
  position        Float         @default(0)
  type            String        @default("text")
  created         DateTime      @default(now())
  updated         DateTime      @default(now())
  questionnaireId Int
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)

  @@unique([questionnaireId, position])
}

model Option {
  id         Int      @id @default(autoincrement())
  value      String   @default("New Option")
  created    DateTime @default(now())
  updated    DateTime @default(now())
  position   Float    @default(0)
  questionId Int

  @@unique([questionId, position])
}

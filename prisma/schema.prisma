generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  members       Member[]
  sessions      Session[]
}

model Member {
  id         Int      @id @default(autoincrement())
  name       String
  role       String
  accepted   Boolean  @default(false)
  spaceId    Int?
  created    DateTime @default(now())
  updated    DateTime @default(now())
  userId     Int
  space      Space?   @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  spaceOwner Space?   @relation("owner")

  @@unique([userId, spaceId])
  @@index([spaceId], map: "Member_spaceId_fkey")
}

model Space {
  id          Int      @id @default(autoincrement())
  name        String   @default("New Space")
  description String?
  personal    Boolean  @default(false)
  created     DateTime @default(now())
  updated     DateTime @default(now())
  ownerId     Int      @unique
  owner       Member   @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     Member[]
}
